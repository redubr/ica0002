- name: install bind9
  apt:
    name:
      - bind9
      - python3-dnspython
    state: latest

- name: Copy config
  template:
    src: ../templates/named.conf.options.j2
    dest: /etc/bind/named.conf.options
  notify:
    - restart bind9
    - reload rndc
  no_log: true
  register: conf

#cmd to check on slave named-checkzone infra.rd /var/cache/bind/db.infra.rd
- name: Copy master zone db
  template:
    src: db.dok.j2
    dest: /var/cache/bind/db.infra.rd # https://serverfault.com/questions/85161/should-i-use-etc-bind-zones-or-var-cache-bind
    force: no # only when missing
  notify:
    - reload rndc
    - restart bind9
  when: inventory_hostname in groups['dns_master']
  register: conf

- name: Copy reverse zone db
  template:
    src: db.dok.reverse.j2
    dest: /var/cache/bind/db.infra.rd.reverse # https://serverfault.com/questions/85161/should-i-use-etc-bind-zones-or-var-cache-bind
    force: no # only when missing
  notify:
    - reload rndc
    - restart bind9
  when: inventory_hostname in groups['dns_master']
  register: conf

- name: CP local
  template:
    src: named.conf.local.j2
    dest: /etc/bind/named.conf.local
  notify:
    - restart bind9
    - reload rndc
  register: conf

- name: start bind9
  service:
    name: bind9
    state: started
    enabled: yes

- name: execute handlers
  meta: flush_handlers

- name: wait
  pause:
    seconds: 15

- name: Add A records
  nsupdate:
    key_name: "update.key"
    key_algorithm: "hmac-sha256"
    key_secret: "{{dns_update_key}}"
    server: "{{ hostvars[groups['dns_master'][0]]['ansible_default_ipv4']['address'] }}"
    zone: "{{domain_name}}"
    record: "{{item.key}}"
    type: "A"
    value: "{{item.value}}"
  loop: "{{dns_a_record | dict2items}}"
  when: inventory_hostname in groups['dns_master'][0]
  run_once: True

- name: Add CNAME records
  nsupdate:
    key_name: "update.key"
    key_algorithm: "hmac-sha256"
    key_secret: "{{dns_update_key}}"
    server: "{{ hostvars[groups['dns_master'][0]]['ansible_default_ipv4']['address'] }}"
    zone: "{{domain_name}}"
    record: "{{item.key}}"
    type: "CNAME"
    value: "{{item.value}}"
  loop: "{{dns_cname_record | dict2items}}"
  when: inventory_hostname in groups['dns_master'][0]
  run_once: True


